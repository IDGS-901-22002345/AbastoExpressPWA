name: Build and deploy Node.js app to Azure Web App - AbastoExpressPWA

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      
      # ‚ö†Ô∏è NO necesitas 'npm install -g yarn' si ya lo est√°s usando en los siguientes pasos,
      # 'actions/setup-node@v4' suele configurarlo. Lo dejo por si tu proyecto lo requiere.
      - name: Install Yarn
        run: npm install -g yarn

      - name: Yarn install, build, and test
        run: |
          yarn install --frozen-lockfile # Mejor pr√°ctica para CI
          yarn build

      # ‚ö†Ô∏è La instalaci√≥n de 'serve' como --dev est√° bien, pero para que Azure la use en la runtime,
      # lo m√°s seguro es tratarla como una dependencia normal o de dev/peer si el build lo necesita.
      # Ya que solo se usa para servir el BUILDEADO, es una dependencia de runtime de despliegue.
      # La dejo como est√°, pero la clave est√° en el ARTEFACTO.
      - name: Install necessary runtime server package
        run: yarn add serve --dev
        
      # El script de inicio es CORRECTO
      - name: Create Azure Startup Script
        run: |
          # ‚ö†Ô∏è Uso de 'npx' requiere que 'node_modules' est√© en el PATH.
          # Como subiremos 'node_modules', esto deber√≠a funcionar.
          echo 'npx serve -s dist -l 8080' > startup.sh
          chmod +x startup.sh

      - name: Cleanup and Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: |
            dist
            startup.sh
            package.json
            yarn.lock
            # üöÄ ¬°CAMBIO CLAVE! Incluye todo el directorio 'node_modules'.
            # Esto asegura que 'serve' y sus dependencias est√©n disponibles para el 'npx' en Azure.
            node_modules/ 
          # ‚ö†Ô∏è Nota: Podr√≠as necesitar agregar un archivo `.deployment` o especificar
          # un directorio ra√≠z en el paso de 'azure/webapps-deploy@v3' si tu app no est√° en la ra√≠z.
          # Por ahora, confiamos en que tu 'dist' est√° bien.

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: . # Descarga en el directorio ra√≠z del job de despliegue

      - name: Login to Azure
        # ... (Tu configuraci√≥n de Azure Login)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_15616D1BC0A54364ACDD1B2306E70DC7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_707D3FC0E54D47DF8CFF53AFA22F604E }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_BD6889BFEB024B1BA8D235604E199458 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'AbastoExpressPWA'
          slot-name: 'Production'
          package: . # Despliega el contenido de la carpeta actual
